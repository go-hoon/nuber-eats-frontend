[{"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/create-account.tsx":"1","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/user/confirm-email.tsx":"2","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/reportWebVitals.ts":"3","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/hooks/useMe.tsx":"4","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/login.tsx":"5","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/apollo.ts":"6","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/routers/logged-in-router.tsx":"7","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/components/header.tsx":"8","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/user/edit-profile.tsx":"9","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/restaurants.tsx":"10","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/404.tsx":"11","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/App.tsx":"12","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/components/form-error.tsx":"13","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/components/restaurant.tsx":"14","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/routers/logged-out-router.tsx":"15","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/search.tsx":"16","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/index.tsx":"17","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/fragments.ts":"18","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/category.tsx":"19","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/restaurant.tsx":"20","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/__generated/globalTypes.ts":"21"},{"size":4449,"mtime":1611258220405,"results":"22","hashOfConfig":"23"},{"size":1702,"mtime":1611305820683,"results":"24","hashOfConfig":"23"},{"size":425,"mtime":1610869518626,"results":"25","hashOfConfig":"23"},{"size":279,"mtime":1611121893753,"results":"26","hashOfConfig":"23"},{"size":3992,"mtime":1611052674081,"results":"27","hashOfConfig":"23"},{"size":994,"mtime":1611256546986,"results":"28","hashOfConfig":"23"},{"size":1500,"mtime":1611563877252,"results":"29","hashOfConfig":"23"},{"size":1096,"mtime":1611259995827,"results":"30","hashOfConfig":"23"},{"size":2823,"mtime":1611305840475,"results":"31","hashOfConfig":"23"},{"size":4269,"mtime":1611513196340,"results":"32","hashOfConfig":"23"},{"size":627,"mtime":1611305779685,"results":"33","hashOfConfig":"23"},{"size":400,"mtime":1610909941439,"results":"34","hashOfConfig":"23"},{"size":235,"mtime":1610964651273,"results":"35","hashOfConfig":"23"},{"size":719,"mtime":1611563924016,"results":"36","hashOfConfig":"23"},{"size":571,"mtime":1611433827993,"results":"37","hashOfConfig":"23"},{"size":1320,"mtime":1611512259408,"results":"38","hashOfConfig":"23"},{"size":543,"mtime":1611052704957,"results":"39","hashOfConfig":"23"},{"size":361,"mtime":1611513176357,"results":"40","hashOfConfig":"23"},{"size":898,"mtime":1611513681933,"results":"41","hashOfConfig":"23"},{"size":1388,"mtime":1611565122694,"results":"42","hashOfConfig":"23"},{"size":1139,"mtime":1611564371058,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"142ld9v",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/create-account.tsx",["101","102","103","104","105"],"import { ApolloError, gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport nuberLogo from \"../images/logo.svg\";\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserRole } from \"../__generated/globalTypes\";\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from \"../__generated/createAccountMutation\";\nimport { isLoggedInVar } from \"../apollo\";\n\nconst CREAT_ACCOUNT_MUTATION = gql`\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface ICreateAccountForm {\n  email: string;\n  password: string;\n  role: UserRole;\n}\n\nexport const CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    errors,\n    watch,\n    handleSubmit,\n    formState,\n  } = useForm<ICreateAccountForm>({\n    mode: \"onChange\",\n    defaultValues: { role: UserRole.Client },\n  });\n\n  const history = useHistory();\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok },\n    } = data;\n    if (ok) {\n      alert(\"Account is created! Login now!\");\n      history.push(\"/\");\n    }\n  };\n\n  const [\n    createAccountMutation,\n    { loading, data: createAccountMutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREAT_ACCOUNT_MUTATION,\n    { onCompleted }\n  );\n\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password, role } = getValues();\n      createAccountMutation({\n        variables: {\n          createAccountInput: {\n            email,\n            password,\n            role,\n          },\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n      <Helmet>\n        <title>Create Account | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img src={nuberLogo} alt=\"logo\" className=\"w-52 mb-10\" />\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          Let's get started\n        </h4>\n        <form\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <input\n            ref={register({\n              required: \"Email is required\",\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            className=\"input transition-colors\"\n          ></input>\n          {errors.email?.message ? (\n            <FormError errorMessage={errors.email.message} />\n          ) : null}\n          {errors.email?.type === \"pattern\" ? (\n            <FormError errorMessage={\"Please enter a valid email\"} />\n          ) : null}\n          <input\n            ref={register({ required: \"Password is required\" })}\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            className=\"input\"\n          ></input>\n          {errors.password?.message ? (\n            <FormError errorMessage={errors.password?.message} />\n          ) : null}\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"Passwords should be more than 10 chars\"}\n            />\n          )}\n          <select\n            className=\"input\"\n            ref={register({ required: true })}\n            name=\"role\"\n          >\n            {Object.keys(UserRole).map((role, i) => (\n              <option key={i}>{role}</option>\n            ))}\n          </select>\n          <Button\n            canClick={formState.isValid}\n            loading={false}\n            actionText=\"Create Account\"\n          />\n          {createAccountMutationResult?.createAccount.error ? (\n            <FormError\n              errorMessage={createAccountMutationResult?.createAccount.error}\n            />\n          ) : null}\n        </form>\n        <div>\n          Already have an account?{\" \"}\n          <Link to=\"/\" className=\"text-lime-600 hover:underline\">\n            Login now\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/user/confirm-email.tsx",["106"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from \"../../__generated/verifyEmail\";\n\nexport const VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const { data: userData } = useMe();\n  const client = useApolloClient();\n  const history = useHistory();\n  const onCompleted = (data: verifyEmail) => {\n    const {\n      verifyEmail: { ok },\n    } = data;\n    if (ok && userData?.me) {\n      client.writeFragment({\n        id: `User:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      history.push(\"/\");\n    }\n  };\n\n  const [verifyEmail] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    { onCompleted }\n  );\n\n  useEffect(() => {\n    const [_, code] = window.location.href.split(\"code=\");\n    verifyEmail({\n      variables: { input: { code } },\n    });\n    console.log(code);\n  });\n  return (\n    <div className=\"mt-20 h-screen flex flex-col items-center justify-center\">\n      <Helmet>\n        <title>Verify Email | Nuber Eats</title>\n      </Helmet>\n      <h2 className=\"text-lg mb-1 font-medium\">Confirming Email...</h2>\n      <h4 className=\"text-gray-700 text-sm\">\n        Please wait, don't cloes this page\n      </h4>\n    </div>\n  );\n};\n","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/reportWebVitals.ts",[],["107","108"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/hooks/useMe.tsx",[],["109","110"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/login.tsx",["111","112"],"import { ApolloError, gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"../__generated/loginMutation\";\nimport nuberLogo from \"../images/logo.svg\";\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\nconst LOGIN_MUTATION = gql`\n  mutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\n\ninterface ILoginForm {\n  email: string;\n  password: string;\n}\n\nexport const Login = () => {\n  const {\n    register,\n    getValues,\n    errors,\n    handleSubmit,\n    formState,\n  } = useForm<ILoginForm>({ mode: \"onChange\" });\n\n  const onCompleted = (data: loginMutation) => {\n    if (data.login.ok) {\n      const {\n        login: { ok, token },\n      } = data;\n      if (ok && token) {\n        localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n        authTokenVar(token);\n        isLoggedInVar(true);\n      }\n    }\n  };\n  const onError = (error: ApolloError) => {};\n\n  const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n    loginMutation,\n    loginMutationVariables\n  >(LOGIN_MUTATION, {\n    onCompleted,\n    onError,\n  });\n\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      loginMutation({\n        variables: {\n          loginInput: {\n            email,\n            password,\n          },\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n      <Helmet>\n        <title>Login | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img src={nuberLogo} alt=\"logo\" className=\"w-52 mb-10\" />\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          Welcome back\n        </h4>\n        <form\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <input\n            ref={register({\n              required: \"Email is required\",\n              pattern: RegExp(\n                /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n              ),\n            })}\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            className=\"input transition-colors\"\n          ></input>\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email.message} />\n          )}\n          {errors.email?.type === \"pattern\" && (\n            <FormError errorMessage={\"Please enter a valid email\"} />\n          )}\n          <input\n            ref={register({ required: \"Password is required\" })}\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            className=\"input mt-3\"\n          ></input>\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"Passwords should be more than 10 chars\"}\n            />\n          )}\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"Login\"\n          />\n          {loginMutationResult?.login?.error && (\n            <FormError errorMessage={loginMutationResult.login.error} />\n          )}\n        </form>\n        <div>\n          New to Nuber?{\" \"}\n          <Link to=\"/create-account\" className=\"text-lime-600 hover:underline\">\n            Create an account\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/apollo.ts",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/routers/logged-in-router.tsx",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/components/header.tsx",[],["113","114"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/user/edit-profile.tsx",["115","116","117"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/button\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  editProfile,\n  editProfileVariables,\n} from \"../../__generated/editProfile\";\n\nconst EDIT_PROFIL_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface IForm {\n  email?: string;\n  password?: string;\n}\n\nexport const EditProfile = () => {\n  const { data: userData } = useMe();\n  const client = useApolloClient();\n  const onCompleted = (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        // update cache\n        client.writeFragment({\n          id: `User:${id}`,\n          fragment: gql`\n            fragment EditedUser on User {\n              verified\n              email\n            }\n          `,\n          data: {\n            verified: false,\n            email: newEmail,\n          },\n        });\n      }\n    }\n  };\n  const { register, handleSubmit, getValues, formState } = useForm<IForm>({\n    mode: \"onChange\",\n    defaultValues: { email: userData?.me.email },\n  });\n\n  const onSubmit = () => {\n    const { email, password } = getValues();\n    editProfile({\n      variables: { input: { email, ...(password !== \"\" && { password }) } },\n    });\n  };\n\n  const [editProfile, { loading, data }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFIL_MUTATION, { onCompleted });\n\n  return (\n    <div className=\"mt-52 flex flex-col justify-center items-center\">\n      <Helmet>\n        <title>Edit Profile | Nuber Eats</title>\n      </Helmet>\n      <h4 className=\"font-medium text-xl tracking-wide\">Edit Profile</h4>\n      <form\n        className=\"grid gap-3 mt-5 max-w-screen-sm w-full mb-5\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <input\n          ref={register({\n            pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          })}\n          name=\"email\"\n          className=\"input\"\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        <input\n          ref={register}\n          name=\"password\"\n          className=\"input\"\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <Button\n          actionText=\"Update Profile\"\n          loading={loading}\n          canClick={formState.isValid}\n        />\n      </form>\n    </div>\n  );\n};\n",["118","119"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/restaurants.tsx",["120"],"import { gql, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Restaurant } from \"../../components/restaurant\";\nimport { CATEGORY_FRAGMENT, RESTAURANTS_FRAGMENT } from \"../../fragments\";\nimport {\n  restaurantsPageQuery,\n  restaurantsPageQueryVariables,\n} from \"../../__generated/restaurantsPageQuery\";\n\nconst RESTAURANTS_QUERY = gql`\n  query restaurantsPageQuery($input: RestaurantsInput!) {\n    allCategories {\n      ok\n      error\n      categories {\n        ...CategoryParts\n      }\n    }\n    restaurants(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      results {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANTS_FRAGMENT}\n  ${CATEGORY_FRAGMENT}\n`;\n\ninterface IFormProps {\n  searchTerm: string;\n}\n\nexport const Restaurants = () => {\n  const [page, setPage] = useState(1);\n\n  const { data, loading, error } = useQuery<\n    restaurantsPageQuery,\n    restaurantsPageQueryVariables\n  >(RESTAURANTS_QUERY, { variables: { input: { page } } });\n\n  const onNextPageClick = () => setPage(page + 1);\n  const onPrevPageClick = () => setPage(page - 1);\n\n  const { register, handleSubmit, getValues } = useForm<IFormProps>();\n  const history = useHistory();\n  const onSearchSubmit = () => {\n    const { searchTerm } = getValues();\n    history.push({\n      pathname: \"/search\",\n      search: `term=${searchTerm}`,\n    });\n  };\n\n  return (\n    <div>\n      <Helmet>\n        <title>Home | Nuber Eats</title>\n      </Helmet>\n      <form\n        className=\"bg-gray-800 w-full py-40 flex items-center justify-center\"\n        onSubmit={handleSubmit(onSearchSubmit)}\n      >\n        <input\n          ref={register({ required: true, minLength: 3 })}\n          name=\"searchTerm\"\n          type=\"Search\"\n          placeholder=\"Search Restaurants...\"\n          className=\"input rounded-md border-0 md:w-4/12 w-3/4\"\n        />\n      </form>\n      {!loading && (\n        <div className=\"max-w-screen-xl mx-auto mt-8 px-5 pb-20 xl:px-0\">\n          <div className=\"flex justify-center mx-auto overflow-x-auto\">\n            {data?.allCategories.categories?.map((category) => (\n              <Link to={`/category/${category.slug}`}>\n                <div\n                  key={category.id}\n                  className=\"flex flex-col items-center mx-4 lg:mx-8 group\"\n                >\n                  <div\n                    className=\"w-14 h-14 rounded-full bg-cover group-hover:bg-gray-200 cursor-pointer\"\n                    style={{ backgroundImage: `url(${category.coverImg})` }}\n                  ></div>\n                  <span className=\"mt-1 text-sm flex flex-col items-center font-medium cursor-pointer\">\n                    {category.name}\n                  </span>\n                </div>\n              </Link>\n            ))}\n          </div>\n          <div className=\"grid mt-12 md:grid-cols-3 gap-x-5 gap-y-10\">\n            {data?.restaurants.results?.map((restaurant) => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + \"\"}\n                coverImg={restaurant.coverImg}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n          <div className=\"grid grid-cols-3 text-cneter max-w-md items-center mx-auto mt-10\">\n            {page > 1 ? (\n              <button\n                className=\"focus:outline-none font-medium text-2xl cursor-pointer\"\n                onClick={onPrevPageClick}\n              >\n                &larr;\n              </button>\n            ) : (\n              <div></div>\n            )}\n            <span className=\"text-center\">\n              Page {page} of {data?.restaurants.totalPages}\n            </span>\n            {page !== data?.restaurants.totalPages ? (\n              <button\n                className=\"focus:outline-none font-medium text-2xl cursor-pointer\"\n                onClick={onNextPageClick}\n              >\n                &rarr;\n              </button>\n            ) : (\n              <div></div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",["121","122"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/404.tsx",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/App.tsx",[],["123","124"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/components/form-error.tsx",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/components/restaurant.tsx",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/search.tsx",["125","126","127","128"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RESTAURANTS_FRAGMENT } from \"../../fragments\";\nimport {\n  searchRestaurant,\n  searchRestaurantVariables,\n} from \"../../__generated/searchRestaurant\";\n\nconst SEARCH_RESTAURANT = gql`\n  query searchRestaurant($input: SearchRestaurantInput!) {\n    searchRestaurant(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANTS_FRAGMENT}\n`;\n\nexport const Search = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const [callQuery, { loading, data, called }] = useLazyQuery<\n    searchRestaurant,\n    searchRestaurantVariables\n  >(SEARCH_RESTAURANT);\n\n  useEffect(() => {\n    const [_, searchTerm] = location.search.split(\"?term=\");\n    if (!searchTerm) {\n      history.replace(\"/\");\n    }\n    callQuery({\n      variables: {\n        input: {\n          page: 1,\n          query: searchTerm,\n        },\n      },\n    });\n  }, [history, location]);\n  console.log(data);\n\n  return (\n    <h1>\n      <Helmet>\n        <title>Search | Nuber Eats</title>\n      </Helmet>\n      Search Page\n    </h1>\n  );\n};\n",["129","130"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/index.tsx",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/fragments.ts",[],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/category.tsx",["131"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { CATEGORY_FRAGMENT, RESTAURANTS_FRAGMENT } from \"../../fragments\";\nimport { category, categoryVariables } from \"../../__generated/category\";\n\nconst CATEGORY_QUERY = gql`\n  query category($input: CategoryInput!) {\n    category(input: $input) {\n      ok\n      error\n      totalPages\n      restaurants {\n        ...RestaurantParts\n      }\n      category {\n        ...CategoryParts\n      }\n    }\n  }\n  ${RESTAURANTS_FRAGMENT}\n  ${CATEGORY_FRAGMENT}\n`;\n\ninterface ICategoryParams {\n  slug: string;\n}\n\nexport const Category = () => {\n  const { slug } = useParams<ICategoryParams>();\n  const { data, loading } = useQuery<category, categoryVariables>(\n    CATEGORY_QUERY,\n    { variables: { input: { page: 1, slug } } }\n  );\n  console.log(data);\n  return <h1>Category</h1>;\n};\n",["132","133"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/pages/client/restaurant.tsx",["134"],"/Users/jeahoonjung/Desktop/courses/nomadcoders/UberEats/nuber-eats-frontend/src/__generated/globalTypes.ts",[],{"ruleId":"135","severity":1,"message":"136","line":1,"column":10,"nodeType":"137","messageId":"138","endLine":1,"endColumn":21},{"ruleId":"135","severity":1,"message":"139","line":14,"column":10,"nodeType":"137","messageId":"138","endLine":14,"endColumn":23},{"ruleId":"135","severity":1,"message":"140","line":36,"column":5,"nodeType":"137","messageId":"138","endLine":36,"endColumn":10},{"ruleId":"141","severity":1,"message":"142","line":95,"column":34,"nodeType":"143","messageId":"144","endLine":95,"endColumn":35,"suggestions":"145"},{"ruleId":"141","severity":1,"message":"142","line":95,"column":59,"nodeType":"143","messageId":"144","endLine":95,"endColumn":60,"suggestions":"146"},{"ruleId":"135","severity":1,"message":"147","line":50,"column":12,"nodeType":"137","messageId":"138","endLine":50,"endColumn":13},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"148","replacedBy":"152"},{"ruleId":"150","replacedBy":"153"},{"ruleId":"141","severity":1,"message":"142","line":94,"column":27,"nodeType":"143","messageId":"144","endLine":94,"endColumn":28,"suggestions":"154"},{"ruleId":"141","severity":1,"message":"142","line":94,"column":52,"nodeType":"143","messageId":"144","endLine":94,"endColumn":53,"suggestions":"155"},{"ruleId":"148","replacedBy":"156"},{"ruleId":"150","replacedBy":"157"},{"ruleId":"135","severity":1,"message":"158","line":68,"column":34,"nodeType":"137","messageId":"138","endLine":68,"endColumn":38},{"ruleId":"141","severity":1,"message":"142","line":85,"column":32,"nodeType":"143","messageId":"144","endLine":85,"endColumn":33,"suggestions":"159"},{"ruleId":"141","severity":1,"message":"142","line":85,"column":57,"nodeType":"143","messageId":"144","endLine":85,"endColumn":58,"suggestions":"160"},{"ruleId":"148","replacedBy":"161"},{"ruleId":"150","replacedBy":"162"},{"ruleId":"135","severity":1,"message":"163","line":43,"column":26,"nodeType":"137","messageId":"138","endLine":43,"endColumn":31},{"ruleId":"148","replacedBy":"164"},{"ruleId":"150","replacedBy":"165"},{"ruleId":"148","replacedBy":"166"},{"ruleId":"150","replacedBy":"167"},{"ruleId":"135","severity":1,"message":"168","line":29,"column":23,"nodeType":"137","messageId":"138","endLine":29,"endColumn":30},{"ruleId":"135","severity":1,"message":"169","line":29,"column":38,"nodeType":"137","messageId":"138","endLine":29,"endColumn":44},{"ruleId":"135","severity":1,"message":"147","line":35,"column":12,"nodeType":"137","messageId":"138","endLine":35,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":47,"column":6,"nodeType":"172","endLine":47,"endColumn":25,"suggestions":"173"},{"ruleId":"148","replacedBy":"174"},{"ruleId":"150","replacedBy":"175"},{"ruleId":"135","severity":1,"message":"168","line":31,"column":17,"nodeType":"137","messageId":"138","endLine":31,"endColumn":24},{"ruleId":"148","replacedBy":"176"},{"ruleId":"150","replacedBy":"177"},{"ruleId":"135","severity":1,"message":"168","line":22,"column":11,"nodeType":"137","messageId":"138","endLine":22,"endColumn":18},"@typescript-eslint/no-unused-vars","'ApolloError' is defined but never used.","Identifier","unusedVar","'isLoggedInVar' is defined but never used.","'watch' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["178","179"],["180","181"],"'_' is assigned a value but never used.","no-native-reassign",["182"],"no-negated-in-lhs",["183"],["182"],["183"],["184","185"],["186","187"],["182"],["183"],"'data' is assigned a value but never used.",["188","189"],["190","191"],["182"],["183"],"'error' is assigned a value but never used.",["182"],["183"],["182"],["183"],"'loading' is assigned a value but never used.","'called' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callQuery'. Either include it or remove the dependency array.","ArrayExpression",["192"],["182"],["183"],["182"],["183"],{"messageId":"193","fix":"194","desc":"195"},{"messageId":"196","fix":"197","desc":"198"},{"messageId":"193","fix":"199","desc":"195"},{"messageId":"196","fix":"200","desc":"198"},"no-global-assign","no-unsafe-negation",{"messageId":"193","fix":"201","desc":"195"},{"messageId":"196","fix":"202","desc":"198"},{"messageId":"193","fix":"203","desc":"195"},{"messageId":"196","fix":"204","desc":"198"},{"messageId":"193","fix":"205","desc":"195"},{"messageId":"196","fix":"206","desc":"198"},{"messageId":"193","fix":"207","desc":"195"},{"messageId":"196","fix":"208","desc":"198"},{"desc":"209","fix":"210"},"removeEscape",{"range":"211","text":"212"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"213","text":"214"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"215","text":"212"},{"range":"216","text":"214"},{"range":"217","text":"212"},{"range":"218","text":"214"},{"range":"219","text":"212"},{"range":"220","text":"214"},{"range":"221","text":"212"},{"range":"222","text":"214"},{"range":"223","text":"212"},{"range":"224","text":"214"},"Update the dependencies array to be: [callQuery, history, location]",{"range":"225","text":"226"},[2528,2529],"",[2528,2528],"\\",[2553,2554],[2553,2553],[2395,2396],[2395,2395],[2420,2421],[2420,2420],[2221,2222],[2221,2221],[2246,2247],[2246,2246],[1146,1165],"[callQuery, history, location]"]